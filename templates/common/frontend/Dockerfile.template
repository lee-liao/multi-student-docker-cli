# Multi-stage Node.js Frontend Dockerfile for {{USERNAME}} - {{PROJECT_NAME}}
# Template type: {{TEMPLATE_TYPE}}
# Optimized for both development and production

# Base stage with Node.js
FROM node:18-alpine as base

# Set build arguments
ARG BUILD_DATE
ARG VERSION=1.0.0
ARG NODE_VERSION=18

# Add metadata
LABEL maintainer="{{USERNAME}}" \
      version="${VERSION}" \
      description="Frontend service for {{PROJECT_NAME}}" \
      build-date="${BUILD_DATE}" \
      node-version="${NODE_VERSION}"

# Install dumb-init for proper signal handling
RUN apk add --no-cache dumb-init

# Create non-root user
RUN addgroup -g 1000 appuser && \
    adduser -D -s /bin/sh -u 1000 -G appuser appuser

# Set working directory
WORKDIR /app

# Set ownership
RUN chown appuser:appuser /app

# Switch to non-root user
USER appuser

# Dependencies stage
FROM base as dependencies

# Copy package files
COPY --chown=appuser:appuser package*.json ./
COPY --chown=appuser:appuser yarn.lock* ./

# Install dependencies
RUN if [ -f yarn.lock ]; then \
        yarn install --frozen-lockfile --production=false; \
    else \
        npm ci --include=dev; \
    fi

# Development stage
FROM dependencies as development

# Set environment variables for development
ENV NODE_ENV=development \
    CHOKIDAR_USEPOLLING=true \
    WATCHPACK_POLLING=true \
    FAST_REFRESH=true

# Copy source code
COPY --chown=appuser:appuser . .

# Expose port
EXPOSE 3000

# Health check for development
HEALTHCHECK --interval=30s --timeout=10s --start-period=10s --retries=3 \
    CMD wget --no-verbose --tries=1 --spider http://localhost:3000 || exit 1

# Use dumb-init for proper signal handling
ENTRYPOINT ["/usr/bin/dumb-init", "--"]

# Development command
CMD ["npm", "run", "dev"]

# Build stage
FROM dependencies as builder

# Set environment for building
ENV NODE_ENV=production

# Copy source code
COPY --chown=appuser:appuser . .

# Build the application
RUN if [ -f yarn.lock ]; then \
        yarn build; \
    else \
        npm run build; \
    fi

# Production dependencies stage
FROM base as prod-dependencies

# Copy package files
COPY --chown=appuser:appuser package*.json ./
COPY --chown=appuser:appuser yarn.lock* ./

# Install only production dependencies
RUN if [ -f yarn.lock ]; then \
        yarn install --frozen-lockfile --production=true && \
        yarn cache clean; \
    else \
        npm ci --only=production && \
        npm cache clean --force; \
    fi

# Production stage
FROM base as production

# Install additional runtime dependencies
USER root
RUN apk add --no-cache \
    curl \
    && rm -rf /var/cache/apk/*

USER appuser

# Set environment variables for production
ENV NODE_ENV=production \
    PORT=3000 \
    HOSTNAME=0.0.0.0

# Copy production dependencies
COPY --from=prod-dependencies --chown=appuser:appuser /app/node_modules ./node_modules

# Copy built application
COPY --from=builder --chown=appuser:appuser /app/.next ./.next
COPY --from=builder --chown=appuser:appuser /app/public ./public
COPY --from=builder --chown=appuser:appuser /app/package*.json ./
COPY --from=builder --chown=appuser:appuser /app/next.config.js* ./

# Create necessary directories
RUN mkdir -p /app/.next/cache && \
    chown -R appuser:appuser /app/.next

# Expose port
EXPOSE 3000

# Health check for production
HEALTHCHECK --interval=30s --timeout=10s --start-period=15s --retries=3 \
    CMD curl -f http://localhost:3000/api/health || exit 1

# Use dumb-init for proper signal handling
ENTRYPOINT ["/usr/bin/dumb-init", "--"]

# Production command
CMD ["npm", "start"]

# Static stage (for serving static files)
FROM nginx:alpine as static

# Install dumb-init
RUN apk add --no-cache dumb-init

# Copy built static files
COPY --from=builder /app/dist /usr/share/nginx/html
COPY --from=builder /app/public /usr/share/nginx/html

# Copy nginx configuration
COPY nginx.conf /etc/nginx/nginx.conf

# Create non-root user for nginx
RUN addgroup -g 1000 appuser && \
    adduser -D -s /bin/sh -u 1000 -G appuser appuser

# Set proper permissions
RUN chown -R appuser:appuser /usr/share/nginx/html && \
    chown -R appuser:appuser /var/cache/nginx && \
    chown -R appuser:appuser /var/log/nginx && \
    chown -R appuser:appuser /etc/nginx/conf.d

# Switch to non-root user
USER appuser

# Expose port
EXPOSE 8080

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD wget --no-verbose --tries=1 --spider http://localhost:8080 || exit 1

# Use dumb-init for proper signal handling
ENTRYPOINT ["/usr/bin/dumb-init", "--"]

# Start nginx
CMD ["nginx", "-g", "daemon off;"]