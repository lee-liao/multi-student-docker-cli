#!/bin/bash

# Common Infrastructure Setup Script
# This script initializes the shared infrastructure services

set -e

echo "🏗️  Setting up Common Infrastructure: {{PROJECT_NAME}} for {{USERNAME}}"
echo "=================================================="

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Check if Docker is running
print_status "Checking Docker availability..."
if ! docker info >/dev/null 2>&1; then
    print_error "Docker is not running. Please start Docker and try again."
    exit 1
fi
print_success "Docker is running"

# Check if docker-compose is available
print_status "Checking docker-compose availability..."
if ! command -v docker-compose >/dev/null 2>&1; then
    print_error "docker-compose is not installed. Please install docker-compose and try again."
    exit 1
fi
print_success "docker-compose is available"

# Create network if it doesn't exist
NETWORK_NAME="{{USERNAME}}-network"
print_status "Creating Docker network: $NETWORK_NAME"
if docker network ls | grep -q "$NETWORK_NAME"; then
    print_warning "Network $NETWORK_NAME already exists"
else
    docker network create "$NETWORK_NAME"
    print_success "Created network: $NETWORK_NAME"
fi

# Check port availability
print_status "Checking port availability..."
PORTS=({{POSTGRES_PORT}} {{MONGODB_PORT}} {{REDIS_PORT}} {{CHROMADB_PORT}} {{JAEGER_UI_PORT}} {{PROMETHEUS_PORT}} {{GRAFANA_PORT}})
PORT_NAMES=("PostgreSQL" "MongoDB" "Redis" "ChromaDB" "Jaeger UI" "Prometheus" "Grafana")

for i in "${!PORTS[@]}"; do
    PORT=${PORTS[$i]}
    SERVICE=${PORT_NAMES[$i]}
    
    if netstat -tuln 2>/dev/null | grep -q ":$PORT "; then
        print_warning "Port $PORT ($SERVICE) is already in use"
        print_warning "This may cause conflicts. Consider stopping other services using this port."
    else
        print_success "Port $PORT ($SERVICE) is available"
    fi
done

# Create observability configuration directories
print_status "Creating observability configuration directories..."
mkdir -p observability/prometheus
mkdir -p observability/grafana/provisioning/datasources
mkdir -p observability/grafana/provisioning/dashboards

# Create Prometheus configuration
print_status "Creating Prometheus configuration..."
cat > observability/prometheus.yml << 'EOF'
global:
  scrape_interval: 15s
  evaluation_interval: 15s

rule_files:
  # - "first_rules.yml"
  # - "second_rules.yml"

scrape_configs:
  - job_name: 'prometheus'
    static_configs:
      - targets: ['localhost:9090']

  - job_name: 'postgres'
    static_configs:
      - targets: ['{{USERNAME}}-postgres:5432']
    metrics_path: /metrics
    scrape_interval: 30s

  - job_name: 'redis'
    static_configs:
      - targets: ['{{USERNAME}}-redis:6379']
    metrics_path: /metrics
    scrape_interval: 30s

  - job_name: 'chromadb'
    static_configs:
      - targets: ['{{USERNAME}}-chromadb:8000']
    metrics_path: /api/v1/metrics
    scrape_interval: 30s
EOF

print_success "Created Prometheus configuration"

# Create Grafana datasource configuration
print_status "Creating Grafana datasource configuration..."
cat > observability/grafana/provisioning/datasources/prometheus.yml << EOF
apiVersion: 1

datasources:
  - name: Prometheus
    type: prometheus
    access: proxy
    url: http://{{USERNAME}}-prometheus:9090
    isDefault: true
    editable: true
EOF

print_success "Created Grafana datasource configuration"

# Create Grafana dashboard provisioning
print_status "Creating Grafana dashboard provisioning..."
cat > observability/grafana/provisioning/dashboards/dashboard.yml << 'EOF'
apiVersion: 1

providers:
  - name: 'default'
    orgId: 1
    folder: ''
    type: file
    disableDeletion: false
    updateIntervalSeconds: 10
    allowUiUpdates: true
    options:
      path: /etc/grafana/provisioning/dashboards
EOF

print_success "Created Grafana dashboard provisioning"

# Pull Docker images
print_status "Pulling Docker images..."
docker-compose pull

print_success "All Docker images pulled successfully"

# Start services
print_status "Starting infrastructure services..."
docker-compose up -d

# Wait for services to be ready
print_status "Waiting for services to be ready..."
sleep 10

# Check service health
print_status "Checking service health..."
SERVICES=("postgres" "mongodb" "redis" "chromadb" "jaeger" "prometheus" "grafana")
HEALTHY_COUNT=0

for service in "${SERVICES[@]}"; do
    if docker-compose ps "$service" | grep -q "Up"; then
        print_success "$service is running"
        ((HEALTHY_COUNT++))
    else
        print_error "$service is not running"
        docker-compose logs "$service" | tail -10
    fi
done

echo ""
echo "=================================================="
if [ $HEALTHY_COUNT -eq ${#SERVICES[@]} ]; then
    print_success "All services are running successfully!"
else
    print_warning "$HEALTHY_COUNT/${#SERVICES[@]} services are running"
    print_warning "Check the logs above for any issues"
fi

# Display service information
echo ""
print_status "Service Access Information:"
echo "=================================================="
echo "📊 Grafana Dashboard:    http://localhost:{{GRAFANA_PORT}}"
echo "   Username: admin"
echo "   Password: {{USERNAME}}_password_2024"
echo ""
echo "🔍 Jaeger Tracing:       http://localhost:{{JAEGER_UI_PORT}}"
echo "📈 Prometheus Metrics:   http://localhost:{{PROMETHEUS_PORT}}"
echo "🗄️  PostgreSQL Database:  localhost:{{POSTGRES_PORT}}"
echo "   Database: shared_db"
echo "   Username: {{USERNAME}}_user"
echo "   Password: {{USERNAME}}_password_2024"
echo ""
echo "📄 MongoDB Database:     localhost:{{MONGODB_PORT}}"
echo "   Database: shared_db"
echo "   Username: {{USERNAME}}_admin"
echo "   Password: {{USERNAME}}_password_2024"
echo ""
echo "⚡ Redis Cache:          localhost:{{REDIS_PORT}}"
echo "   Password: {{USERNAME}}_redis_2024"
echo ""
echo "🔍 ChromaDB Vector DB:   http://localhost:{{CHROMADB_PORT}}"
echo ""

# Network information
print_status "Network Information:"
echo "=================================================="
echo "🌐 Shared Network: {{USERNAME}}-network"
echo ""
echo "Application projects can connect to these services using:"
echo "  - Container hostnames (from Docker): {{USERNAME}}-postgres, {{USERNAME}}-mongodb, etc."
echo "  - Localhost ports (from local dev): localhost:{{POSTGRES_PORT}}, localhost:{{MONGODB_PORT}}, etc."
echo ""

# Next steps
print_status "Next Steps:"
echo "=================================================="
echo "1. 📊 Open Grafana: http://localhost:{{GRAFANA_PORT}}"
echo "2. 🔍 Check Jaeger: http://localhost:{{JAEGER_UI_PORT}}"
echo "3. 🏗️  Create application projects:"
echo "   python cli.py create-project my-rag --template rag"
echo "   python cli.py create-project my-agent --template agent"
echo ""
echo "4. 📚 Read README.md for detailed service configuration"
echo "5. 🔧 Monitor services: docker-compose ps"
echo "6. 📋 View logs: docker-compose logs -f"
echo ""

print_success "Common infrastructure setup complete!"
echo "=================================================="