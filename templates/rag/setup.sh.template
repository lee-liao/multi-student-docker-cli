#!/bin/bash

# RAG Project Setup Script
# This script initializes a RAG (Retrieval-Augmented Generation) application

set -e

echo "ü§ñ Setting up RAG Project: {{PROJECT_NAME}}"
echo "=================================================="
echo "üë§ User: {{USERNAME}}"
echo "üìÖ Started: {{TIMESTAMP}}"
echo "üîó Mode: {{#if HAS_COMMON_PROJECT}}Shared infrastructure{{else}}Self-contained{{/if}}"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

print_step() {
    echo -e "${CYAN}[STEP]${NC} $1"
}

# Error handling function
handle_error() {
    local exit_code=$?
    local line_number=$1
    print_error "RAG setup failed at line $line_number with exit code $exit_code"
    
    echo ""
    print_status "RAG-specific troubleshooting:"
    echo "1. Check vector database connection: curl http://localhost:{{CHROMADB_PORT}}/api/v1/heartbeat"
    echo "2. Verify PostgreSQL for RAG data: docker-compose exec postgres psql -U {{USERNAME}}_user -d rag_chatbot"
    echo "3. Check embedding service: docker-compose logs backend | grep embedding"
    echo "4. Verify document processing: docker-compose logs backend | grep document"
    echo ""
    exit $exit_code
}

# Set up error handling
trap 'handle_error ${LINENO}' ERR

# Step 1: Environment validation
print_step "1. Validating RAG environment..."

# Check Docker
if ! docker info >/dev/null 2>&1; then
    print_error "Docker is not running"
    exit 1
fi
print_success "Docker is running"

# Check docker-compose
if ! command -v docker-compose >/dev/null 2>&1; then
    print_error "docker-compose is not installed"
    exit 1
fi
print_success "docker-compose is available"

# Validate docker-compose.yml
if ! docker-compose config >/dev/null 2>&1; then
    print_error "docker-compose.yml has syntax errors"
    exit 1
fi
print_success "docker-compose.yml is valid"

{{#if HAS_COMMON_PROJECT}}
# Step 2: Common infrastructure validation
print_step "2. Validating shared infrastructure..."

NETWORK_NAME="{{USERNAME}}-network"
if docker network ls | grep -q "$NETWORK_NAME"; then
    print_success "Common project network found"
    
    # Check critical RAG services
    RAG_REQUIRED_SERVICES=("postgres" "chromadb" "redis")
    RUNNING_COUNT=0
    
    for service in "${RAG_REQUIRED_SERVICES[@]}"; do
        if docker ps --format "table {{.Names}}" | grep -q "{{USERNAME}}-$service"; then
            print_success "$service is running"
            ((RUNNING_COUNT++))
        else
            print_warning "$service is not running"
        fi
    done
    
    if [ $RUNNING_COUNT -lt ${#RAG_REQUIRED_SERVICES[@]} ]; then
        print_error "Required RAG services are not running in common project"
        echo ""
        print_status "Start common infrastructure:"
        echo "cd ../common && docker-compose up -d"
        exit 1
    fi
else
    print_error "Common project network not found"
    exit 1
fi
{{else}}
# Step 2: Network setup for self-contained mode
print_step "2. Setting up RAG network..."

NETWORK_NAME="{{USERNAME}}-rag-network"
if ! docker network ls | grep -q "$NETWORK_NAME"; then
    docker network create "$NETWORK_NAME"
    print_success "Created RAG network: $NETWORK_NAME"
fi
{{/if}}

# Step 3: RAG-specific port validation
print_step "3. Checking RAG service ports..."

RAG_PORTS=({{BACKEND_PORT}} {{FRONTEND_PORT}}{{#unless HAS_COMMON_PROJECT}} {{POSTGRES_PORT}} {{REDIS_PORT}} {{CHROMADB_PORT}}{{/unless}})
RAG_SERVICES=("Backend API" "Frontend UI"{{#unless HAS_COMMON_PROJECT}} "PostgreSQL" "Redis" "ChromaDB"{{/unless}})

for i in "${!RAG_PORTS[@]}"; do
    PORT=${RAG_PORTS[$i]}
    SERVICE=${RAG_SERVICES[$i]}
    
    if command -v netstat >/dev/null 2>&1; then
        if netstat -tuln 2>/dev/null | grep -q ":$PORT "; then
            print_warning "Port $PORT ($SERVICE) is already in use"
        else
            print_success "Port $PORT ($SERVICE) is available"
        fi
    fi
done

# Step 4: RAG database and vector store preparation
print_step "4. Preparing RAG data stores..."

# Check for RAG-specific initialization
if [ -f "database/rag-init.sql" ]; then
    print_success "RAG database schema found"
elif [ -f "database/init.sql" ]; then
    print_success "Database initialization script found"
else
    print_warning "No RAG database initialization found"
fi

# Check for document processing setup
if [ -d "documents" ] || [ -d "data/documents" ]; then
    print_success "Document directory found for RAG processing"
else
    print_status "Creating document directory for RAG..."
    mkdir -p documents
    print_success "Created documents directory"
fi

# Step 5: Start RAG services
print_step "5. Starting RAG services..."

print_status "Pulling Docker images..."
docker-compose pull

print_status "Starting RAG application..."
docker-compose up -d

# Step 6: RAG-specific health checks
print_step "6. Performing RAG health checks..."

sleep 10

# Check backend API
print_status "Checking RAG backend API..."
for ((i=1; i<=12; i++)); do
    if curl -f http://localhost:{{BACKEND_PORT}}/health >/dev/null 2>&1; then
        print_success "RAG backend API is healthy"
        break
    elif [ $i -eq 12 ]; then
        print_error "RAG backend API failed to start"
        docker-compose logs backend
    else
        print_status "Waiting for RAG backend... (attempt $i/12)"
        sleep 5
    fi
done

# Check frontend
print_status "Checking RAG frontend..."
for ((i=1; i<=8; i++)); do
    if curl -f http://localhost:{{FRONTEND_PORT}} >/dev/null 2>&1; then
        print_success "RAG frontend is accessible"
        break
    elif [ $i -eq 8 ]; then
        print_warning "RAG frontend may still be starting"
    else
        sleep 3
    fi
done

{{#unless HAS_COMMON_PROJECT}}
# Check database (self-contained mode)
print_status "Checking PostgreSQL for RAG..."
for ((i=1; i<=10; i++)); do
    if docker-compose exec -T postgres pg_isready -U {{USERNAME}}_user >/dev/null 2>&1; then
        print_success "PostgreSQL is ready for RAG data"
        break
    else
        sleep 2
    fi
done

# Check ChromaDB (self-contained mode)
print_status "Checking ChromaDB for vector storage..."
for ((i=1; i<=10; i++)); do
    if curl -f http://localhost:{{CHROMADB_PORT}}/api/v1/heartbeat >/dev/null 2>&1; then
        print_success "ChromaDB is ready for vector storage"
        break
    else
        sleep 2
    fi
done
{{/unless}}

# Step 7: RAG database initialization
print_step "7. Initializing RAG database..."

{{#if HAS_COMMON_PROJECT}}
# Initialize RAG schema in shared database
print_status "Setting up RAG schema in shared database..."
if [ -f "database/rag-init.sql" ]; then
    # Wait for shared PostgreSQL
    for ((i=1; i<=30; i++)); do
        if docker exec {{USERNAME}}-postgres pg_isready -U {{USERNAME}}_user >/dev/null 2>&1; then
            break
        fi
        sleep 1
    done
    
    print_status "Creating RAG-specific tables..."
    docker exec -i {{USERNAME}}-postgres psql -U {{USERNAME}}_user -d shared_db < database/rag-init.sql
    print_success "RAG database schema initialized"
fi
{{else}}
# Initialize RAG database (self-contained mode)
if [ -f "database/init.sql" ] || [ -f "database/rag-init.sql" ]; then
    print_status "Initializing RAG database..."
    sleep 5  # Wait for PostgreSQL to be ready
    
    if [ -f "database/rag-init.sql" ]; then
        docker-compose exec -T postgres psql -U {{USERNAME}}_user -d rag_chatbot -f /docker-entrypoint-initdb.d/rag-init.sql
    else
        docker-compose exec -T postgres psql -U {{USERNAME}}_user -d rag_chatbot -f /docker-entrypoint-initdb.d/init.sql
    fi
    print_success "RAG database initialized"
fi
{{/if}}

# Step 8: Vector database setup
print_step "8. Setting up vector database..."

{{#if HAS_COMMON_PROJECT}}
CHROMADB_URL="http://{{USERNAME}}-chromadb:8000"
{{else}}
CHROMADB_URL="http://localhost:{{CHROMADB_PORT}}"
{{/if}}

# Create RAG collection in ChromaDB
print_status "Creating RAG document collection..."
sleep 3

# Test ChromaDB connection and create collection
if curl -f "$CHROMADB_URL/api/v1/heartbeat" >/dev/null 2>&1; then
    # Create a collection for RAG documents
    curl -X POST "$CHROMADB_URL/api/v1/collections" \
         -H "Content-Type: application/json" \
         -d '{"name": "{{PROJECT_NAME}}_documents", "metadata": {"description": "RAG document embeddings"}}' \
         >/dev/null 2>&1 || print_status "Collection may already exist"
    print_success "ChromaDB collection ready for RAG"
else
    print_warning "ChromaDB not accessible, collection will be created on first use"
fi

# Final status
echo ""
echo "=================================================="
print_step "RAG Setup Complete!"
echo "=================================================="

print_success "RAG application is ready!"

echo ""
print_status "RAG Service Access:"
echo "ü§ñ RAG Backend API:      http://localhost:{{BACKEND_PORT}}"
echo "   Health check:         http://localhost:{{BACKEND_PORT}}/health"
echo "   Chat endpoint:        http://localhost:{{BACKEND_PORT}}/api/chat"
echo "   Document upload:      http://localhost:{{BACKEND_PORT}}/api/documents"
echo ""
echo "üåê RAG Frontend UI:      http://localhost:{{FRONTEND_PORT}}"
echo "   Chat interface:       http://localhost:{{FRONTEND_PORT}}/chat"
echo "   Document manager:     http://localhost:{{FRONTEND_PORT}}/documents"

{{#if HAS_COMMON_PROJECT}}
echo ""
echo "üìä Shared Infrastructure:"
echo "   PostgreSQL:           localhost:{{POSTGRES_PORT}}"
echo "   ChromaDB:             http://localhost:{{CHROMADB_PORT}}"
echo "   Redis:                localhost:{{REDIS_PORT}}"
{{else}}
echo ""
echo "üóÑÔ∏è  RAG Data Stores:"
echo "   PostgreSQL:           localhost:{{POSTGRES_PORT}}"
echo "   ChromaDB:             http://localhost:{{CHROMADB_PORT}}"
echo "   Redis:                localhost:{{REDIS_PORT}}"
{{/if}}

echo ""
print_status "Next Steps for RAG:"
echo "1. üìÑ Upload documents: Use the frontend or POST to /api/documents"
echo "2. ü§ñ Test chat: Open http://localhost:{{FRONTEND_PORT}}/chat"
echo "3. üîç Monitor embeddings: Check ChromaDB at http://localhost:{{CHROMADB_PORT}}"
echo "4. üìä View logs: docker-compose logs -f backend"
echo "5. üìö Read README.md for RAG configuration details"

echo ""
print_status "RAG Development Tips:"
echo "‚Ä¢ Document formats: PDF, TXT, MD, DOCX supported"
echo "‚Ä¢ Embedding model: Check backend logs for model info"
echo "‚Ä¢ Vector similarity: Adjust threshold in backend config"
echo "‚Ä¢ Chat history: Stored in PostgreSQL"
echo "‚Ä¢ Document chunks: Configurable in backend settings"

print_success "RAG setup completed successfully!"
echo "=================================================="

# Cleanup
trap - ERR