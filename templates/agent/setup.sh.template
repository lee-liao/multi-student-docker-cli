#!/bin/bash

# Agent Project Setup Script
# This script initializes an AI Agent application with multi-service architecture

set -e

echo "🤖 Setting up Agent Project: {{PROJECT_NAME}}"
echo "=================================================="
echo "👤 User: {{USERNAME}}"
echo "📅 Started: {{TIMESTAMP}}"
echo "🔗 Mode: {{#if HAS_COMMON_PROJECT}}Shared infrastructure{{else}}Self-contained{{/if}}"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
PURPLE='\033[0;35m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

print_step() {
    echo -e "${CYAN}[STEP]${NC} $1"
}

print_agent() {
    echo -e "${PURPLE}[AGENT]${NC} $1"
}

# Error handling function
handle_error() {
    local exit_code=$?
    local line_number=$1
    print_error "Agent setup failed at line $line_number with exit code $exit_code"
    
    echo ""
    print_status "Agent-specific troubleshooting:"
    echo "1. Check agent orchestrator: docker-compose -p {{USERNAME}}-{{PROJECT_NAME}} logs orchestrator"
    echo "2. Verify worker services: docker-compose -p {{USERNAME}}-{{PROJECT_NAME}} logs worker"
    echo "3. Check task queue: docker-compose -p {{USERNAME}}-{{PROJECT_NAME}} logs redis | grep queue"
    echo "4. Verify agent API: curl http://localhost:{{BACKEND_PORT}}/api/agents"
    echo "5. Check agent execution logs: docker-compose -p {{USERNAME}}-{{PROJECT_NAME}} logs -f --tail=50"
    echo ""
    exit $exit_code
}

# Set up error handling
trap 'handle_error ${LINENO}' ERR

# Step 1: Environment validation
print_step "1. Validating Agent environment..."

# Check Docker
if ! docker info >/dev/null 2>&1; then
    print_error "Docker is not running"
    exit 1
fi
print_success "Docker is running"

# Check docker-compose
if ! command -v docker-compose >/dev/null 2>&1; then
    print_error "docker-compose is not installed"
    exit 1
fi
print_success "docker-compose is available"

# Validate docker-compose.yml
if ! docker-compose -p {{USERNAME}}-{{PROJECT_NAME}} config >/dev/null 2>&1; then
    print_error "docker-compose.yml has syntax errors"
    exit 1
fi
print_success "docker-compose.yml is valid"

{{#if HAS_COMMON_PROJECT}}
# Step 2: Common infrastructure validation
print_step "2. Validating shared infrastructure..."

NETWORK_NAME="{{USERNAME}}-network"
if docker network ls | grep -q "$NETWORK_NAME"; then
    print_success "Common project network found"
    
    # Check critical Agent services
    AGENT_REQUIRED_SERVICES=("postgres" "mongodb" "redis")
    RUNNING_COUNT=0
    
    for service in "${AGENT_REQUIRED_SERVICES[@]}"; do
        if docker ps --format "table {{.Names}}" | grep -q "{{USERNAME}}-$service"; then
            print_success "$service is running"
            ((RUNNING_COUNT++))
        else
            print_warning "$service is not running"
        fi
    done
    
    if [ $RUNNING_COUNT -lt ${#AGENT_REQUIRED_SERVICES[@]} ]; then
        print_error "Required Agent services are not running in common project"
        echo ""
        print_status "Start common infrastructure:"
        echo "cd ../common && docker-compose -p {{USERNAME}}-common up -d"
        exit 1
    fi
    
    # Check observability services for agent monitoring
    if docker ps --format "table {{.Names}}" | grep -q "{{USERNAME}}-jaeger"; then
        print_success "Jaeger tracing available for agent monitoring"
    fi
    
    if docker ps --format "table {{.Names}}" | grep -q "{{USERNAME}}-prometheus"; then
        print_success "Prometheus metrics available for agent monitoring"
    fi
else
    print_error "Common project network not found"
    exit 1
fi
{{else}}
# Step 2: Network setup for self-contained mode
print_step "2. Setting up Agent network..."

NETWORK_NAME="{{USERNAME}}-agent-network"
if ! docker network ls | grep -q "$NETWORK_NAME"; then
    docker network create "$NETWORK_NAME"
    print_success "Created Agent network: $NETWORK_NAME"
fi
{{/if}}

# Step 3: Agent-specific port validation
print_step "3. Checking Agent service ports..."

AGENT_PORTS=({{BACKEND_PORT}} {{FRONTEND_PORT}} {{WORKER_PORT}}{{#unless HAS_COMMON_PROJECT}} {{POSTGRES_PORT}} {{MONGODB_PORT}} {{REDIS_PORT}}{{/unless}})
AGENT_SERVICES=("Backend API" "Frontend UI" "Worker Service"{{#unless HAS_COMMON_PROJECT}} "PostgreSQL" "MongoDB" "Redis"{{/unless}})

for i in "${!AGENT_PORTS[@]}"; do
    PORT=${AGENT_PORTS[$i]}
    SERVICE=${AGENT_SERVICES[$i]}
    
    if command -v netstat >/dev/null 2>&1; then
        if netstat -tuln 2>/dev/null | grep -q ":$PORT "; then
            print_warning "Port $PORT ($SERVICE) is already in use"
        else
            print_success "Port $PORT ($SERVICE) is available"
        fi
    fi
done

# Step 4: Agent configuration and tools preparation
print_step "4. Preparing Agent configuration..."

# Check for agent configuration
if [ -f "config/agents.yaml" ] || [ -f "config/agents.json" ]; then
    print_success "Agent configuration found"
elif [ -f "agents/config.yaml" ]; then
    print_success "Agent configuration found in agents directory"
else
    print_warning "No agent configuration found - using defaults"
fi

# Check for agent tools and capabilities
if [ -d "tools" ] || [ -d "agents/tools" ]; then
    print_success "Agent tools directory found"
    TOOL_COUNT=$(find tools agents/tools -name "*.py" 2>/dev/null | wc -l || echo "0")
    print_status "Found $TOOL_COUNT agent tool files"
else
    print_status "Creating agent tools directory..."
    mkdir -p tools
    print_success "Created tools directory for agent capabilities"
fi

# Check for agent workflows
if [ -d "workflows" ] || [ -d "agents/workflows" ]; then
    print_success "Agent workflows directory found"
else
    print_status "Creating agent workflows directory..."
    mkdir -p workflows
    print_success "Created workflows directory"
fi

# Step 5: Database preparation for agents
print_step "5. Preparing Agent databases..."

{{#if HAS_COMMON_PROJECT}}
print_status "Using shared databases for agent data..."
print_status "PostgreSQL: Agent execution logs and state"
print_status "MongoDB: Agent knowledge base and documents"
print_status "Redis: Task queues and agent communication"
{{else}}
# Check for agent-specific database initialization
if [ -f "database/agent-init.sql" ]; then
    print_success "Agent PostgreSQL schema found"
elif [ -f "database/init.sql" ]; then
    print_success "Database initialization script found"
else
    print_warning "No agent database initialization found"
fi

if [ -f "database/agent-init.js" ]; then
    print_success "Agent MongoDB schema found"
elif [ -f "database/mongo-init.js" ]; then
    print_success "MongoDB initialization script found"
else
    print_warning "No agent MongoDB initialization found"
fi
{{/if}}

# Step 6: Start Agent services
print_step "6. Starting Agent services..."

print_status "Pulling Docker images..."
docker-compose -p {{USERNAME}}-{{PROJECT_NAME}} pull

print_status "Starting Agent infrastructure..."
{{#unless HAS_COMMON_PROJECT}}
# Start databases first in self-contained mode
print_status "Starting databases..."
docker-compose -p {{USERNAME}}-{{PROJECT_NAME}} up -d postgres mongodb redis
sleep 10
{{/unless}}

print_status "Starting Agent application services..."
docker-compose -p {{USERNAME}}-{{PROJECT_NAME}} up -d

# Step 7: Agent-specific health checks
print_step "7. Performing Agent health checks..."

sleep 15

# Check backend API
print_status "Checking Agent backend API..."
for ((i=1; i<=12; i++)); do
    if curl -f http://localhost:{{BACKEND_PORT}}/health >/dev/null 2>&1; then
        print_success "Agent backend API is healthy"
        break
    elif [ $i -eq 12 ]; then
        print_error "Agent backend API failed to start"
        docker-compose -p {{USERNAME}}-{{PROJECT_NAME}} logs backend
    else
        print_status "Waiting for Agent backend... (attempt $i/12)"
        sleep 5
    fi
done

# Check agent orchestrator
print_status "Checking Agent orchestrator..."
for ((i=1; i<=10; i++)); do
    if curl -f http://localhost:{{BACKEND_PORT}}/api/agents/status >/dev/null 2>&1; then
        print_success "Agent orchestrator is running"
        break
    elif [ $i -eq 10 ]; then
        print_warning "Agent orchestrator may still be initializing"
    else
        sleep 3
    fi
done

# Check worker service
print_status "Checking Agent worker service..."
for ((i=1; i<=8; i++)); do
    if curl -f http://localhost:{{WORKER_PORT}}/health >/dev/null 2>&1; then
        print_success "Agent worker service is healthy"
        break
    elif [ $i -eq 8 ]; then
        print_warning "Agent worker service may still be starting"
    else
        sleep 3
    fi
done

# Check frontend
print_status "Checking Agent frontend..."
for ((i=1; i<=8; i++)); do
    if curl -f http://localhost:{{FRONTEND_PORT}} >/dev/null 2>&1; then
        print_success "Agent frontend is accessible"
        break
    elif [ $i -eq 8 ]; then
        print_warning "Agent frontend may still be starting"
    else
        sleep 3
    fi
done

{{#unless HAS_COMMON_PROJECT}}
# Check databases (self-contained mode)
print_status "Checking PostgreSQL for agent data..."
for ((i=1; i<=10; i++)); do
    if docker-compose -p {{USERNAME}}-{{PROJECT_NAME}} exec -T postgres pg_isready -U {{USERNAME}}_user >/dev/null 2>&1; then
        print_success "PostgreSQL is ready for agent data"
        break
    else
        sleep 2
    fi
done

print_status "Checking MongoDB for agent knowledge..."
for ((i=1; i<=10; i++)); do
    if docker-compose -p {{USERNAME}}-{{PROJECT_NAME}} exec -T mongodb mongosh --eval "db.runCommand({ping: 1})" --quiet >/dev/null 2>&1; then
        print_success "MongoDB is ready for agent knowledge base"
        break
    else
        sleep 2
    fi
done

print_status "Checking Redis for agent queues..."
for ((i=1; i<=10; i++)); do
    if docker-compose -p {{USERNAME}}-{{PROJECT_NAME}} exec -T redis redis-cli ping >/dev/null 2>&1; then
        print_success "Redis is ready for agent task queues"
        break
    else
        sleep 2
    fi
done
{{/unless}}

# Step 8: Agent database initialization
print_step "8. Initializing Agent databases..."

{{#if HAS_COMMON_PROJECT}}
# Initialize agent schema in shared databases
print_status "Setting up agent schema in shared databases..."

# PostgreSQL for agent execution logs
if [ -f "database/agent-init.sql" ]; then
    print_status "Creating agent-specific tables in PostgreSQL..."
    docker exec -i {{USERNAME}}-postgres psql -U {{USERNAME}}_user -d shared_db < database/agent-init.sql
    print_success "Agent PostgreSQL schema initialized"
fi

# MongoDB for agent knowledge base
if [ -f "database/agent-init.js" ]; then
    print_status "Creating agent collections in MongoDB..."
    docker exec -i {{USERNAME}}-mongodb mongosh shared_db < database/agent-init.js
    print_success "Agent MongoDB schema initialized"
fi
{{else}}
# Initialize agent databases (self-contained mode)
if [ -f "database/agent-init.sql" ] || [ -f "database/init.sql" ]; then
    print_status "Initializing agent PostgreSQL database..."
    sleep 5  # Wait for PostgreSQL to be ready
    
    if [ -f "database/agent-init.sql" ]; then
        docker-compose -p {{USERNAME}}-{{PROJECT_NAME}} exec -T postgres psql -U {{USERNAME}}_user -d agent_system -f /docker-entrypoint-initdb.d/agent-init.sql
    else
        docker-compose -p {{USERNAME}}-{{PROJECT_NAME}} exec -T postgres psql -U {{USERNAME}}_user -d agent_system -f /docker-entrypoint-initdb.d/init.sql
    fi
    print_success "Agent PostgreSQL database initialized"
fi

if [ -f "database/agent-init.js" ] || [ -f "database/mongo-init.js" ]; then
    print_status "Initializing agent MongoDB database..."
    sleep 3
    
    if [ -f "database/agent-init.js" ]; then
        docker-compose -p {{USERNAME}}-{{PROJECT_NAME}} exec -T mongodb mongosh agent_knowledge < /docker-entrypoint-initdb.d/agent-init.js
    else
        docker-compose -p {{USERNAME}}-{{PROJECT_NAME}} exec -T mongodb mongosh agent_knowledge < /docker-entrypoint-initdb.d/mongo-init.js
    fi
    print_success "Agent MongoDB database initialized"
fi
{{/if}}

# Step 9: Agent system initialization
print_step "9. Initializing Agent system..."

# Register default agents
print_status "Registering default agents..."
sleep 5

# Check if agents are registered
if curl -f http://localhost:{{BACKEND_PORT}}/api/agents >/dev/null 2>&1; then
    AGENT_COUNT=$(curl -s http://localhost:{{BACKEND_PORT}}/api/agents | grep -o '"id"' | wc -l || echo "0")
    print_success "Agent system initialized with $AGENT_COUNT agents"
else
    print_warning "Agent registration endpoint not ready yet"
fi

# Test task queue
print_status "Testing agent task queue..."
{{#if HAS_COMMON_PROJECT}}
REDIS_HOST="{{USERNAME}}-redis"
{{else}}
REDIS_HOST="localhost"
{{/if}}

if docker exec {{USERNAME}}-redis redis-cli -h $REDIS_HOST ping >/dev/null 2>&1; then
    print_success "Agent task queue is operational"
else
    print_warning "Agent task queue may need more time to initialize"
fi

# Final status
echo ""
echo "=================================================="
print_step "Agent Setup Complete!"
echo "=================================================="

print_success "Agent system is ready!"

echo ""
print_status "Agent Service Access:"
echo "🤖 Agent Backend API:     http://localhost:{{BACKEND_PORT}}"
echo "   Health check:          http://localhost:{{BACKEND_PORT}}/health"
echo "   Agent management:      http://localhost:{{BACKEND_PORT}}/api/agents"
echo "   Task execution:        http://localhost:{{BACKEND_PORT}}/api/tasks"
echo "   Agent chat:            http://localhost:{{BACKEND_PORT}}/api/chat"
echo ""
echo "🌐 Agent Frontend UI:     http://localhost:{{FRONTEND_PORT}}"
echo "   Agent dashboard:       http://localhost:{{FRONTEND_PORT}}/dashboard"
echo "   Task monitor:          http://localhost:{{FRONTEND_PORT}}/tasks"
echo "   Agent chat:            http://localhost:{{FRONTEND_PORT}}/chat"
echo ""
echo "⚙️  Agent Worker Service:  http://localhost:{{WORKER_PORT}}"
echo "   Worker health:         http://localhost:{{WORKER_PORT}}/health"
echo "   Task processing:       http://localhost:{{WORKER_PORT}}/status"

{{#if HAS_COMMON_PROJECT}}
echo ""
echo "📊 Shared Infrastructure:"
echo "   PostgreSQL:            localhost:{{POSTGRES_PORT}}"
echo "   MongoDB:               localhost:{{MONGODB_PORT}}"
echo "   Redis:                 localhost:{{REDIS_PORT}}"
echo "   Jaeger Tracing:        http://localhost:{{JAEGER_UI_PORT}}"
echo "   Prometheus:            http://localhost:{{PROMETHEUS_PORT}}"
echo "   Grafana:               http://localhost:{{GRAFANA_PORT}}"
{{else}}
echo ""
echo "🗄️  Agent Data Stores:"
echo "   PostgreSQL:            localhost:{{POSTGRES_PORT}}"
echo "   MongoDB:               localhost:{{MONGODB_PORT}}"
echo "   Redis:                 localhost:{{REDIS_PORT}}"
{{/if}}

echo ""
print_status "Next Steps for Agent Development:"
echo "1. 🤖 Create agents: Use the frontend or POST to /api/agents"
echo "2. 🛠️  Configure tools: Add Python files to the tools/ directory"
echo "3. 📋 Create tasks: Submit tasks via /api/tasks endpoint"
echo "4. 💬 Test chat: Open http://localhost:{{FRONTEND_PORT}}/chat"
echo "5. 📊 Monitor execution: Check dashboard and logs"

echo ""
print_status "Agent Development Tips:"
echo "• Agent types: Conversational, Task-based, Workflow, Tool-using"
echo "• Tool integration: Place tools in tools/ directory"
echo "• Task queues: Redis handles async task processing"
echo "• State management: PostgreSQL stores execution state"
echo "• Knowledge base: MongoDB stores agent knowledge and context"
echo "• Monitoring: Use Jaeger for tracing agent execution flows"
echo "• Scaling: Add more worker instances for parallel processing"

echo ""
print_agent "Agent System Features:"
echo "✅ Multi-agent orchestration"
echo "✅ Async task processing"
echo "✅ Tool integration framework"
echo "✅ Conversation management"
echo "✅ Execution state tracking"
echo "✅ Knowledge base integration"
echo "✅ Distributed tracing"
echo "✅ Performance monitoring"

print_success "Agent setup completed successfully!"
echo "=================================================="

# Cleanup
trap - ERR