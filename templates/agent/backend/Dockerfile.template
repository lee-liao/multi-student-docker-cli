# Agent Backend Dockerfile for {{USERNAME}} - {{PROJECT_NAME}}
# Specialized for AI agent orchestration and execution

# Build stage
FROM python:3.11-slim as builder

# Set build arguments
ARG BUILD_DATE
ARG VERSION=1.0.0

# Add metadata
LABEL maintainer="{{USERNAME}}" \
      version="${VERSION}" \
      description="Agent Backend service for {{PROJECT_NAME}}" \
      build-date="${BUILD_DATE}" \
      specialized="ai-agent-orchestration"

# Install system dependencies for building
RUN apt-get update && apt-get install -y \
    build-essential \
    curl \
    git \
    pkg-config \
    libhdf5-dev \
    libopenblas-dev \
    liblapack-dev \
    gfortran \
    && rm -rf /var/lib/apt/lists/*

# Create non-root user
RUN groupadd --gid 1000 appuser && \
    useradd --uid 1000 --gid appuser --shell /bin/bash --create-home appuser

# Set working directory
WORKDIR /app

# Copy requirements
COPY requirements.txt requirements-dev.txt* ./

# Install Python dependencies
RUN pip install --no-cache-dir --upgrade pip setuptools wheel && \
    pip install --no-cache-dir -r requirements.txt

# Production stage
FROM python:3.11-slim as production

# Install runtime dependencies
RUN apt-get update && apt-get install -y \
    curl \
    dumb-init \
    libhdf5-103 \
    libopenblas0 \
    liblapack3 \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Create non-root user
RUN groupadd --gid 1000 appuser && \
    useradd --uid 1000 --gid appuser --shell /bin/bash --create-home appuser

# Set working directory
WORKDIR /app

# Copy Python packages from builder
COPY --from=builder /usr/local/lib/python3.11/site-packages /usr/local/lib/python3.11/site-packages
COPY --from=builder /usr/local/bin /usr/local/bin

# Copy application code
COPY --chown=appuser:appuser . .

# Create necessary directories for agent operations
RUN mkdir -p /app/logs /app/data /app/memory /app/tools /app/workflows /app/models && \
    chown -R appuser:appuser /app

# Switch to non-root user
USER appuser

# Set environment variables for agent workloads
ENV PYTHONPATH=/app \
    PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PIP_NO_CACHE_DIR=1 \
    TOKENIZERS_PARALLELISM=false \
    TRANSFORMERS_CACHE=/app/models \
    HF_HOME=/app/models \
    AGENT_MAX_ITERATIONS={{AGENT_MAX_ITERATIONS:-10}} \
    AGENT_TIMEOUT={{AGENT_TIMEOUT:-300}} \
    MEMORY_RETENTION_DAYS={{MEMORY_RETENTION_DAYS:-30}} \
    TOOL_EXECUTION_TIMEOUT={{TOOL_EXECUTION_TIMEOUT:-60}} \
    MAX_CONCURRENT_AGENTS={{MAX_CONCURRENT_AGENTS:-5}} \
    ENABLE_TOOL_SAFETY_CHECKS={{ENABLE_TOOL_SAFETY_CHECKS:-true}} \
    AGENT_LOG_LEVEL={{AGENT_LOG_LEVEL:-INFO}}

# Expose port
EXPOSE 8000

# Health check with agent-specific endpoint
HEALTHCHECK --interval=30s --timeout=15s --start-period=30s --retries=3 \
    CMD curl -f http://localhost:8000/health || exit 1

# Use dumb-init for proper signal handling
ENTRYPOINT ["/usr/bin/dumb-init", "--"]

# Default command
CMD ["python", "-m", "uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8000", "--workers", "1"]

# Worker stage (for background agent execution)
FROM production as worker

# Set environment variables for worker
ENV WORKER_TYPE=agent_executor \
    WORKER_CONCURRENCY={{WORKER_CONCURRENCY:-4}} \
    TASK_TIMEOUT={{TASK_TIMEOUT:-600}} \
    WORKER_LOG_LEVEL={{WORKER_LOG_LEVEL:-INFO}}

# Worker command
CMD ["python", "-m", "app.worker", "--worker-type", "agent_executor"]

# Development stage
FROM production as development

# Switch back to root for development tools
USER root

# Install development dependencies
RUN apt-get update && apt-get install -y \
    vim \
    htop \
    postgresql-client \
    tree \
    strace \
    && rm -rf /var/lib/apt/lists/*

# Install development Python packages
COPY requirements-dev.txt* ./
RUN pip install --no-cache-dir -r requirements-dev.txt || true

# Switch back to appuser
USER appuser

# Override environment for development
ENV ENVIRONMENT=development \
    LOG_LEVEL=DEBUG \
    AGENT_LOG_LEVEL=DEBUG \
    RELOAD=true \
    ENABLE_DEBUG_TOOLS=true

# Development command with reload
CMD ["python", "-m", "uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8000", "--reload", "--log-level", "debug"]