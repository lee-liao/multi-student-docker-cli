version: '3.8'

services:
  {{#if_no_common_project}}
  # Infrastructure services (only if no common project exists)
  postgres-agent:
    image: pgvector/pgvector:pg15
    container_name: {{USERNAME}}-agent-postgres
    ports:
      - "{{POSTGRES_PORT}}:5432"
    environment:
      - POSTGRES_DB=agent_system
      - POSTGRES_USER={{USERNAME}}_user
      - POSTGRES_PASSWORD={{USERNAME}}_password_2024
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres_agent_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/01-init.sql
    networks:
      - {{USERNAME}}-agent-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U {{USERNAME}}_user -d agent_system"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  redis-agent:
    image: redis:7-alpine
    container_name: {{USERNAME}}-agent-redis
    ports:
      - "{{REDIS_PORT}}:6379"
    command: redis-server --appendonly yes --requirepass {{USERNAME}}_redis_2024
    volumes:
      - redis_agent_data:/data
    networks:
      - {{USERNAME}}-agent-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.25'

  # Vector database for agent memory and embeddings
  chromadb:
    image: chromadb/chroma:latest
    container_name: {{USERNAME}}-agent-chromadb
    ports:
      - "{{CHROMADB_PORT}}:8000"
    environment:
      - CHROMA_SERVER_HOST=0.0.0.0
      - CHROMA_SERVER_HTTP_PORT=8000
      - PERSIST_DIRECTORY=/chroma/data
      - ANONYMIZED_TELEMETRY=False
    volumes:
      - chromadb_data:/chroma/data
    networks:
      - {{USERNAME}}-agent-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v2/heartbeat"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
  {{/if_no_common_project}}

  # Agent orchestration backend
  agent-backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: {{USERNAME}}-agent-backend
    ports:
      - "{{BACKEND_PORT}}:8000"
    environment:
      {{#if_common_project}}
      - DATABASE_URL=postgresql+asyncpg://{{USERNAME}}_user:{{USERNAME}}_password_2024@{{USERNAME}}-postgres:5432/agent_system
      - CHROMADB_HOST={{USERNAME}}-chromadb
      - CHROMADB_PORT=8000
      - REDIS_URL=redis://{{USERNAME}}_redis_2024@{{USERNAME}}-redis:6379/0
      {{else}}
      - DATABASE_URL=postgresql+asyncpg://{{USERNAME}}_user:{{USERNAME}}_password_2024@{{USERNAME}}-agent-postgres:5432/agent_system
      - CHROMADB_HOST={{USERNAME}}-agent-chromadb
      - CHROMADB_PORT=8000
      - REDIS_URL=redis://{{USERNAME}}_redis_2024@{{USERNAME}}-agent-redis:6379/0
      {{/if_common_project}}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - ENVIRONMENT=development
      - LOG_LEVEL=INFO
      - CORS_ORIGINS={{CORS_ORIGINS_FULL}}
      - AGENT_MAX_ITERATIONS=10
      - AGENT_TIMEOUT=300
      - MEMORY_RETENTION_DAYS=30
    volumes:
      - ./backend:/app
      - agent_logs:/app/logs
      - agent_memory:/app/memory
    networks:
      {{#if_common_project}}
      - {{USERNAME}}-network
      {{else}}
      - {{USERNAME}}-agent-network
      {{/if_common_project}}
    depends_on:
      {{#if_common_project}}
      - postgres
      - chromadb
      - redis
      {{else}}
      - postgres-agent
      - chromadb
      - redis-agent
      {{/if_common_project}}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'

  # Agent management frontend
  agent-frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: development
    container_name: {{USERNAME}}-agent-frontend
    ports:
      - "{{FRONTEND_PORT}}:3000"
    environment:
      - NEXT_PUBLIC_API_BASE_URL=http://localhost:{{BACKEND_PORT}}
      - NODE_ENV=development
      - CHOKIDAR_USEPOLLING=true
      - WATCHPACK_POLLING=true
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    networks:
      {{#if_common_project}}
      - {{USERNAME}}-network
      {{else}}
      - {{USERNAME}}-agent-network
      {{/if_common_project}}
    depends_on:
      - agent-backend
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # Agent worker for background tasks
  agent-worker:
    build:
      context: ./backend
      dockerfile: Dockerfile.worker
    container_name: {{USERNAME}}-agent-worker
    environment:
      {{#if_common_project}}
      - DATABASE_URL=postgresql+asyncpg://{{USERNAME}}_user:{{USERNAME}}_password_2024@{{USERNAME}}-postgres:5432/agent_system
      - CHROMADB_HOST={{USERNAME}}-chromadb
      - CHROMADB_PORT=8000
      - REDIS_URL=redis://{{USERNAME}}_redis_2024@{{USERNAME}}-redis:6379/0
      {{else}}
      - DATABASE_URL=postgresql+asyncpg://{{USERNAME}}_user:{{USERNAME}}_password_2024@{{USERNAME}}-agent-postgres:5432/agent_system
      - CHROMADB_HOST={{USERNAME}}-agent-chromadb
      - CHROMADB_PORT=8000
      - REDIS_URL=redis://{{USERNAME}}_redis_2024@{{USERNAME}}-agent-redis:6379/0
      {{/if_common_project}}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - ENVIRONMENT=development
      - LOG_LEVEL=INFO
      - WORKER_CONCURRENCY=4
      - TASK_TIMEOUT=600
    volumes:
      - ./backend:/app
      - agent_logs:/app/logs
      - agent_memory:/app/memory
    networks:
      {{#if_common_project}}
      - {{USERNAME}}-network
      {{else}}
      - {{USERNAME}}-agent-network
      {{/if_common_project}}
    depends_on:
      {{#if_common_project}}
      - postgres
      - redis
      {{else}}
      - postgres-agent
      - redis-agent
      {{/if_common_project}}
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

networks:
  {{#if_common_project}}
  {{USERNAME}}-network:
    external: true
  {{else}}
  {{USERNAME}}-agent-network:
    name: {{USERNAME}}-agent-network
  {{/if_common_project}}

volumes:
  {{#if_no_common_project}}
  postgres_agent_data:
    name: {{USERNAME}}-agent-postgres-data
  chromadb_data:
    name: {{USERNAME}}-agent-chromadb-data
  redis_agent_data:
    name: {{USERNAME}}-agent-redis-data
  {{/if_no_common_project}}
  agent_logs:
    name: {{USERNAME}}-agent-logs
  agent_memory:
    name: {{USERNAME}}-agent-memory